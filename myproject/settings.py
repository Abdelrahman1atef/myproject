"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from django.db.utils import OperationalError
from django.core.exceptions import ImproperlyConfigured
from django.db.utils import OperationalError, InterfaceError
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-pww(fs-4u@r1_g%8ij+@$==6zg&tl&d#gw+!b4vy$51q!i(d!n')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['.ngrok-free.app','127.0.0.1', 'localhost']

AUTH_USER_MODEL = 'api.AppUser'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'corsheaders',
    'api',
    'channels',
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'api.utils.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
ASGI_APPLICATION = 'myproject.asgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
            "symmetric_encryption_keys": [os.environ.get('CHANNEL_SECRET_KEY', 'default_channel_key').encode()],
        },
    },
}
CORS_ALLOW_ALL_ORIGINS = True  # Allow requests from any origin (use with caution in production)
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:5500',  # Frontend URL
    'https://locust-eminent-urchin.ngrok-free.app'
]
CSRF_TRUSTED_ORIGINS = [
    'https://locust-eminent-urchin.ngrok-free.app',
]
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be at the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'

# Validate database configuration
def validate_database_config():
    required_settings = ['ENGINE', 'NAME', 'USER', 'PASSWORD', 'HOST', 'PORT']
    for setting in required_settings:
        if setting not in DATABASES['default']:
            raise ImproperlyConfigured(f"Database setting '{setting}' is missing.")

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # MySQL backend
        'NAME': os.environ.get('DB_NAME', 'stock'),  # Your database name
        'USER': os.environ.get('DB_USER', 'root'),  # MySQL username
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),  # MySQL password
        'HOST': os.environ.get('DB_HOST', 'localhost'),  # MySQL host (usually localhost)
        'PORT': os.environ.get('DB_PORT', '3306'),  # MySQL default port
        'OPTIONS': {
            'charset': 'utf8mb4',  # Use utf8mb4 for full Unicode support
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",  # Strict mode for data integrity
        },
    }
}

validate_database_config()

# Handle database connection errors - Removed during app initialization
# This should be moved to a management command or handled during runtime

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Add the path to your external frontend folder
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles'),  # This points to the frontend folder
]

# Folder where Django will collect static files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # This should be a separate folder

# Debug toolbar configuration - temporarily disabled due to migration issues
# if DEBUG:
#     INSTALLED_APPS += ['debug_toolbar']
#     MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
#     INTERNAL_IPS = ['127.0.0.1']

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Firebase Cloud Messaging server key (replace with your actual key)
FCM_SERVER_KEY = os.environ.get('FCM_SERVER_KEY', '')

# Firebase Cloud Messaging v1 API settings
FIREBASE_PROJECT_ID = 'ramzy-pharmacy'  # Your Firebase project ID
FIREBASE_CREDENTIALS_FILE = os.path.join(BASE_DIR, 'firebase', 'ramzy-pharmacy-firebase-adminsdk-fbsvc-b1451cab80.json')  # Path to your service account JSON

# Email Configuration for OTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server
EMAIL_PORT = 587  # Gmail SMTP port
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')

# OTP Configuration
OTP_EXPIRY_MINUTES = 10  # OTP expires after 10 minutes
OTP_LENGTH = 6  # 6-digit OTP

# Cache Configuration for OTP
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# For production, use Redis cache:
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }
