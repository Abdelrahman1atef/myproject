"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from django.db.utils import OperationalError
from django.core.exceptions import ImproperlyConfigured
from django.db.utils import OperationalError, InterfaceError

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pww(fs-4u@r1_g%8ij+@$==6zg&tl&d#gw+!b4vy$51q!i(d!n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# ALLOWED_HOSTS = ['ManAtef.pythonanywhere.com']
ALLOWED_HOSTS = ['.ngrok-free.app','127.0.0.1', 'localhost']

# DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'
# if DEBUG:
#     ALLOWED_HOSTS = ['.ngrok-free.app','127.0.0.1', 'localhost']
# else:
#     ALLOWED_HOSTS = ['ManAtef.pythonanywhere.com']
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'dashboard',
    'drf_yasg',
    'corsheaders',
    'api',
    'debug_toolbar',
]
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

CORS_ALLOW_ALL_ORIGINS = True  # Allow requests from any origin (use with caution in production)
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:5500',  # Frontend URL
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]
INTERNAL_IPS = [
    '127.0.0.1',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates',
                 os.path.join(BASE_DIR, 'ui'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'

# Validate database configuration
def validate_database_config():
    required_settings = ['ENGINE', 'NAME', 'USER', 'PASSWORD', 'HOST', 'PORT']
    for setting in required_settings:
        if setting not in DATABASES['default']:
            raise ImproperlyConfigured(f"Database setting '{setting}' is missing.")


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mssql',  # SQL Server backend
        'NAME': 'stock',  # Your database name
        'USER': 'ManAtef',  # Replace with the SQL Server username
        'PASSWORD': '3221123',  # Replace with the SQL Server password
        'HOST': 'MANATEF\MANATEF',  # Your server name with the instance
        'PORT': '1433',  # Leave empty to use the default port (1433)
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',  # ODBC driver
            # 'trusted_connection': 'yes',  # Enable Windows Authentication
        },
    }
}
validate_database_config()
# Handle database connection errors
try:
    from django.db import connection
    connection.ensure_connection()
except (OperationalError, InterfaceError) as e:
    print(f"Database connection error: {e}")
    # Notify the administrator or log the error
    # You can also retry the connection or exit gracefully

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Add the path to your external frontend folder
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles'),  # This points to the frontend folder
]

# Folder where Django will collect static files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # This should be a separate folder

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
